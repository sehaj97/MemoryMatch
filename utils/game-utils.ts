import type { CardType, LevelConfig } from "@/types/game-types";
import {
  Heart,
  Star,
  Zap,
  Music,
  Coffee,
  Camera,
  Gift,
  Smile,
  Rocket,
  Leaf,
  Sun,
  Moon,
  Cloud,
  Umbrella,
  Bookmark,
  Bell,
  Flag,
  Award,
  Compass,
  Map,
  Anchor,
  Aperture,
  Apple,
  Archive,
  ArrowUp,
  AtSign,
  Axe,
  Baby,
  Backpack,
  Badge,
  Banana,
  Banknote,
  BarChart,
  Barcode,
  Battery,
  Beaker,
  Bean,
  Bike,
  Binary,
  Bird,
  Bitcoin,
  Bluetooth,
  Bold,
  Bomb,
  Book,
  BookOpen,
  Box,
  Briefcase,
  Bug,
  Building,
  Bus,
  Cake,
  Calculator,
  Calendar,
  Car,
  CarFront,
  Cast,
  Cat,
  Check,
  ChefHat,
  Cherry,
  PuzzleIcon as Chess,
  ChevronDown,
  ChevronUp,
  Chrome,
  Circle,
  Clipboard,
  Clock,
  Clover,
  Code,
  Codepen,
  Codesandbox,
  Cog,
  Coins,
  Command,
  Component,
  Contact,
  Contrast,
  Cookie,
  Copy,
  Copyright,
  CreditCard,
  Croissant,
  Crop,
  Crown,
  CuboidIcon as Cube,
  CupSodaIcon as Cup,
  CurlyBraces,
  Currency,
  Database,
  Delete,
  Dessert,
  Diamond,
  Dice1Icon as Dice,
  Disc,
  Divide,
  Dna,
  Dog,
  DollarSign,
  Droplet,
  Drumstick,
  Edit,
  Egg,
  Equal,
  Euro,
  Expand,
  Eye,
  Facebook,
  FastForward,
  Feather,
  FerrisWheel,
  File,
  Film,
  Filter,
  Fingerprint,
  Fish,
  Flame,
  FlaskConical,
  Flower,
  Focus,
  Folder,
  ClubIcon as Football,
  Footprints,
} from "lucide-react";

// Define all available emojis
export const allEmojis = [
  // Basic emojis
  "🐶",
  "🐱",
  "🐭",
  "🐹",
  "🐰",
  "🦊",
  "🐻",
  "🐼",
  "🦁",
  "🐮",
  "🐷",
  "🐸",
  "🐵",
  "🐔",
  "🐧",
  "🐦",
  "🦆",
  "🦅",
  "🦉",
  "🦇",
  // More emojis for higher levels
  "🐺",
  "🐗",
  "🐴",
  "🦄",
  "🐝",
  "🐛",
  "🦋",
  "🐌",
  "🐞",
  "🐜",
  "🦟",
  "🦗",
  "🕷️",
  "🕸️",
  "🦂",
  "🦀",
  "🦞",
  "🦐",
  "🦑",
  "🐙",
  "🦈",
  "🐬",
  "🐳",
  "🐋",
  "🐟",
  "🐠",
  "🐡",
  "🦆",
  "🦢",
  "🦩",
  "🐊",
  "🐢",
  "🦎",
  "🐍",
  "🐲",
  "🦕",
  "🦖",
  "🦔",
  "🦦",
  "🦥",
  "🐘",
  "🦏",
  "🦛",
  "🐪",
  "🐫",
  "🦒",
  "🦘",
  "🦬",
  "🐃",
  "🐂",
  "🐄",
  "🐎",
  "🐖",
  "🐏",
  "🐑",
  "🦙",
  "🐐",
  "🦌",
  "🐕",
  "🐩",
  "🦮",
  "🐕‍🦺",
  "🐈",
  "🐈‍⬛",
  "🪶",
  "🐓",
  "🦃",
  "🦤",
  "🦚",
  "🦜",
  "🦢",
  "🦩",
  "🕊️",
  "🦅",
  "🦆",
  "🦉",
  "🦇",
  "🐒",
  "🦍",
  "🦧",
  "🍇",
  "🍈",
  "🍉",
  "🍊",
  "🍋",
  "🍌",
  "🍍",
  "🥭",
  "🍎",
  "🍏",
  "🍐",
  "🍑",
  "🍒",
  "🍓",
  "🫐",
  "🥝",
  "🍅",
  "🫒",
  "🥥",
  "🥑",
];

// Map icon names to Lucide components
export const iconMap: Record<string, any> = {
  // Basic icons
  Heart,
  Star,
  Zap,
  Music,
  Coffee,
  Camera,
  Gift,
  Smile,
  Rocket,
  Leaf,
  Sun,
  Moon,
  Cloud,
  Umbrella,
  Bookmark,
  Bell,
  Flag,
  Award,
  Compass,
  Map,
  // More icons for higher levels
  Anchor,
  Aperture,
  Apple,
  Archive,
  ArrowUp,
  AtSign,
  Axe,
  Baby,
  Backpack,
  Badge,
  Banana,
  Banknote,
  BarChart,
  Barcode,
  Battery,
  Beaker,
  Bean,
  Bell,
  Bike,
  Binary,
  Bird,
  Bitcoin,
  Bluetooth,
  Bold,
  Bomb,
  Book,
  BookOpen,
  Box,
  Briefcase,
  Bug,
  Building,
  Bus,
  Cake,
  Calculator,
  Calendar,
  Camera,
  Car,
  CarFront,
  Cast,
  Cat,
  Check,
  ChefHat,
  Cherry,
  Chess,
  ChevronDown,
  ChevronUp,
  Chrome,
  Circle,
  Clipboard,
  Clock,
  Cloud,
  Clover,
  Code,
  Codepen,
  Codesandbox,
  Coffee,
  Cog,
  Coins,
  Command,
  Compass,
  Component,
  Contact,
  Contrast,
  Cookie,
  Copy,
  Copyright,
  CreditCard,
  Croissant,
  Crop,
  Crown,
  Cube,
  Cup,
  CurlyBraces,
  Currency,
  Database,
  Delete,
  Dessert,
  Diamond,
  Dice,
  Dice,
  Disc,
  Divide,
  Dna,
  Dog,
  DollarSign,
  Droplet,
  Drumstick,
  Edit,
  Egg,
  Equal,
  Euro,
  Expand,
  Eye,
  Facebook,
  FastForward,
  Feather,
  FerrisWheel,
  File,
  Film,
  Filter,
  Fingerprint,
  Fish,
  Flag,
  Flame,
  FlaskConical,
  Flower,
  Focus,
  Folder,
  Football,
  Footprints,
};

// Get all available icon names
export const allIconNames = Object.keys(iconMap);

// Define level configurations
export const levels: LevelConfig[] = [
  {
    id: 1,
    name: "Easy",
    pairs: 8,
    gridCols: { mobile: 4, tablet: 4, desktop: 4 },
    maxAttempts: 15,
  },
  {
    id: 2,
    name: "Medium",
    pairs: 18,
    gridCols: { mobile: 4, tablet: 4, desktop: 4 },
    maxAttempts: 30,
  },
  {
    id: 3,
    name: "Hard",
    pairs: 32,
    gridCols: { mobile: 4, tablet: 8, desktop: 8 },
    maxAttempts: 50,
  },
  {
    id: 4,
    name: "Expert",
    pairs: 48,
    gridCols: { mobile: 4, tablet: 8, desktop: 8 },
    maxAttempts: 70,
  },
  {
    id: 5,
    name: "Master",
    pairs: 64,
    gridCols: { mobile: 4, tablet: 8, desktop: 8 },
    maxAttempts: 110,
  },
  {
    id: 6,
    name: "Legend",
    pairs: 100,
    gridCols: { mobile: 4, tablet: 12, desktop: 12 },
    maxAttempts: 150,
  },
];

// Create card content pairs for a specific level
export const getCardContentsForLevel = (level: LevelConfig) => {
  const pairs = level.pairs;
  const contents = [];

  for (let i = 0; i < pairs; i++) {
    if (i < allEmojis.length && i < allIconNames.length) {
      contents.push({
        emoji: allEmojis[i],
        icon: allIconNames[i],
      });
    }
  }

  return contents;
};

// Create and shuffle cards for a specific level
export const createShuffledCardsForLevel = (level: LevelConfig): CardType[] => {
  const cardContents = getCardContentsForLevel(level);

  // Create pairs of cards
  const cardPairs = [...cardContents, ...cardContents].map(
    (content, index) => ({
      id: index,
      emoji: content.emoji,
      icon: content.icon,
      isFlipped: false,
      isMatched: false,
    })
  );

  // Shuffle the cards
  return shuffleCards(cardPairs);
};

// Shuffle the cards using Fisher-Yates algorithm
export const shuffleCards = (cards: CardType[]): CardType[] => {
  const shuffled = [...cards];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

// Get level by ID
export const getLevelById = (levelId: number): LevelConfig => {
  return levels.find((level) => level.id === levelId) || levels[0];
};
